(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{132:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return u}));var r=n(1),i=n(9),a=(n(0),n(180)),o={id:"2_design_principes",title:"Design Principes",sidebar_label:"Design Principes"},c={id:"1_concepts/2_design_principes",title:"Design Principes",description:"## Pod level management",source:"@site/docs/1_concepts/2_design_principes.md",permalink:"/nifikop/docs/1_concepts/2_design_principes",editUrl:"https://github.com/Orange-OpenSource/nifikop/edit/master/website/docs/1_concepts/2_design_principes.md",sidebar_label:"Design Principes",sidebar:"docs",previous:{title:"Introduction",permalink:"/nifikop/docs/1_concepts/1_introduction"},next:{title:"Features",permalink:"/nifikop/docs/1_concepts/3_features"}},s=[{value:"Pod level management",id:"pod-level-management",children:[]}],l={rightToc:s};function u(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"pod-level-management"},"Pod level management"),Object(a.b)("p",null,"NiFi is a stateful application. The first piece of the puzzle is the Node, which is a simple server capable of createing/forming a cluster with other Nodes. Every Node has his own ",Object(a.b)("strong",{parentName:"p"},"unique")," configuration which differs slightly from all others."),Object(a.b)("p",null,"All NiFi on Kubernetes setup use ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/"}),"StatefulSet")," to create a NiFi Cluster. Just to quickly recap from the K8s docs:"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"StatefulSet manages the deployment and scaling of a set of Pods, and provide guarantees about their ordering and uniqueness. Like a Deployment, a StatefulSet manages Pods that are based on an identical container spec. Unlike a Deployment, a StatefulSet maintains sticky identities for each of its Pods. These pods are created from the same spec, but are not interchangeable: each has a persistent identifier that is maintained across any rescheduling.")),Object(a.b)("p",null,"How does this looks from the perspective of Apache NiFi ?"),Object(a.b)("p",null,"With StatefulSet we get:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"unique Node IDs generated during Pod startup"),Object(a.b)("li",{parentName:"ul"},"networking between Nodes with headless services"),Object(a.b)("li",{parentName:"ul"},"unique Persistent Volumes for Nodes")),Object(a.b)("p",null,"Using StatefulSet we ",Object(a.b)("strong",{parentName:"p"},"lose:")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"the ability to modify the configuration of unique Nodes"),Object(a.b)("li",{parentName:"ul"},"to remove a specific Node from a cluster (StatefulSet always removes the most recently created Node)"),Object(a.b)("li",{parentName:"ul"},"to use multiple, different Persistent Volumes for each Node")),Object(a.b)("p",null,"The Orange NiFi Operator uses ",Object(a.b)("inlineCode",{parentName:"p"},"simple")," Pods, ConfigMaps, and PersistentVolumeClaims, instead of StatefulSet (based on the design used by ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/banzaicloud/kafka-operator"}),"Banzai Cloud Kafka Operator"),").\nUsing these resources allows us to build an Operator which is better suited to NiFi."),Object(a.b)("p",null,"With the Orange NiFi operator we can:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"modify the configuration of unique Nodes"),Object(a.b)("li",{parentName:"ul"},"remove specific Nodes from clusters"),Object(a.b)("li",{parentName:"ul"},"use multiple Persistent Volumes for each Node")))}u.isMDXComponent=!0},180:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return f}));var r=n(0),i=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),u=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},p=function(e){var t=u(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,f=p["".concat(o,".").concat(d)]||p[d]||b[d]||a;return n?i.a.createElement(f,c({ref:t},l,{components:n})):i.a.createElement(f,c({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<a;l++)o[l]=n[l];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);